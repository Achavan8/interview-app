To build and run the containers using Docker Compose, follow these steps:

### Prerequisites

- **Docker** and **Docker Compose** should be installed on your machine.
- Ensure your project structure is correctly set up with the necessary files (Dockerfiles, `docker-compose.yml`, etc.).

### Step-by-Step Instructions

1. **Navigate to Your Project Directory**:

   Open a terminal and change to the root directory of your project where the `docker-compose.yml` file is located:

   ```bash
   cd /path/to/your/project
   ```

2. **Build the Docker Images**:

   Before running the containers, you need to build the Docker images for each service. You can do this using the `docker-compose` command:

   ```bash
   docker-compose build
   ```

   This command will look for the `Dockerfile` in each service directory (as specified in your `docker-compose.yml` file) and build the images.

3. **Run the Containers**:

   After building the images, you can start the containers with:

   ```bash
   docker-compose up
   ```

   This command will start all the services defined in your `docker-compose.yml` file (frontend, backend, and MongoDB). The `up` command will also display the logs from each container in real time.

   If you want to run the containers in the background (detached mode), add the `-d` flag:

   ```bash
   docker-compose up -d
   ```

4. **Access Your Application**:

   Once the containers are running, you can access your application using a web browser:

   - **Frontend**: Open your browser and go to `http://localhost`. This should load your React frontend application.
   - **Backend**: If you want to interact with the backend directly, you can access it via `http://localhost:3000/api/`.
   - **MongoDB**: MongoDB will be running on `localhost:27017`, though it won't have a web interface. You can interact with it using a MongoDB client like `mongo shell` or `MongoDB Compass`.

5. **View Logs**:

   If youâ€™re running the containers in detached mode, you can view the logs of a specific service using:

   ```bash
   docker-compose logs <service_name>
   ```

   For example, to view the logs for the backend service:

   ```bash
   docker-compose logs backend
   ```

6. **Stop the Containers**:

   To stop the containers while keeping their state intact, use:

   ```bash
   docker-compose stop
   ```

   To stop and remove the containers, networks, and volumes defined in the `docker-compose.yml` file:

   ```bash
   docker-compose down
   ```

   If you want to remove all data associated with the containers (including volumes), use:

   ```bash
   docker-compose down -v
   ```

### Docker Compose Commands Summary

- **Build Images**: `docker-compose build`
- **Run Containers**: `docker-compose up` (use `-d` to run in detached mode)
- **View Logs**: `docker-compose logs <service_name>`
- **Stop Containers**: `docker-compose stop`
- **Remove Containers, Networks, Volumes**: `docker-compose down` (use `-v` to also remove volumes)

### Troubleshooting

- If you encounter any errors while building or running the containers, check the logs for more detailed error messages.
- Ensure that all the necessary files (`Dockerfile`, `docker-compose.yml`, `.env`, etc.) are correctly configured and located in the expected directories.

By following these instructions, you should be able to build and run your multi-container application using Docker Compose effectively.
=============

